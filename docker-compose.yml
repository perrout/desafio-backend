version: '3.9'

services:
    db-dev:
        image: mysql:5.7
        container_name: db-dev
        restart: always
        environment:
            MYSQL_ROOT_PASSWORD: '${MYSQL_ROOT_PASSWORD}'
            MYSQL_DATABASE: '${MYSQL_DATABASE}'
            MYSQL_USER: '${MYSQL_USERNAME}'
            MYSQL_PASSWORD: '${MYSQL_PASSWORD}'
            MYSQL_ALLOW_EMPTY_PASSWORD: 'yes'
        volumes:
            - 'data-db:/var/lib/mysql'
        networks:
            - dev
        ports:
            - ${MYSQL_PORT:-3306}:3306
    redis-dev:
        image: 'redis:alpine'
        container_name: redis-dev
        restart: always
        ports:
            - ${REDIS_PORT:-6379}:6379
        volumes:
            - 'data-redis:/data'
        networks:
            - dev
        healthcheck:
          test: ["CMD", "redis-cli", "ping"]
          retries: 3
          timeout: 5s
    memcached-dev:
        image: memcached
        container_name: memcached-dev
        restart: always
        ports:
            - ${MEMCACHED_PORT:-11211}:11211
    adminer-dev:
        image: adminer
        container_name: adminer-dev
        restart: always
        networks:
            - dev
        depends_on:
            - db-dev
        links: 
            - db-dev
        ports:
            - ${ADMINER_PORT:-8080}:8080
    api-dev:
        build:
            context: .
            dockerfile: Dockerfile
        container_name: api-dev
        restart: always
        command: 'php artisan serve --host=0.0.0.0'
        volumes:
            - data-app:/app
        networks:
            - dev
        ports:
            - ${API_PORT:-80}:8000
        depends_on:
            - db-dev
        links: 
            - db-dev
    api-queue-dev:
        build:
            context: .
            dockerfile: Dockerfile
        container_name: api-queue-dev
        restart: always
        command: 'php artisan queue:work'
        volumes:
            - data-app:/app
        networks:
            - dev
        depends_on:
            - db-dev
networks:
    dev:
        driver: bridge
volumes:
    data-app:
        driver_opts:
            type: none
            device: ${PWD}/app
            o: bind
    data-db:
        driver: local
    data-redis:
        driver: local
